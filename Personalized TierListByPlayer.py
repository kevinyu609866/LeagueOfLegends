# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c8joDsO6B-DR-AfxbUpW_qMyC8WskgX2
"""

import numpy as np
import requests
import pandas as pd

#import 
columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'Result']
DF = pd.DataFrame(columns = columns)
print(DF)

print("hi")
key = "RGAPI-a8e3c5b5-d5f9-4f94-9f7a-7e5e3799879b"
summonerName = (str)(input('Summoner Name'))
url= "https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/" + summonerName + "?api_key=" + key
params={'APPID': key}
response=requests.get(url,params=params)
values=response.json()
#print(values)

accountId = values['accountId']
#print(accountId)

matchlistsurl = "https://na1.api.riotgames.com/lol/match/v4/matchlists/by-account/" + accountId + "?api_key=" + key
matches = requests.get(matchlistsurl, params)
matchesdata = matches.json()
#print(matchesdata)

GamesArr = []
ChampionArr = []

matchlist = matchesdata['matches']
for match in matchlist:
    #print(match)
    for x in match:
        if (x == 'gameId'):
            GamesArr.append(match[x])
        elif (x == 'champion'):
            ChampionArr.append(match[x])

print(GamesArr)
print(ChampionArr)

import pandas as pd

#DF.append([1,1])

for games in GamesArr:
    gameurl = "https://na1.api.riotgames.com/lol/match/v4/matches/" + str(games) + "?api_key=" + key
    game = requests.get(gameurl, params)
    ParticipantsArr = []
    
    gamedata = game.json()
    for x in gamedata:
        #print(x)
        if (x == 'participants'):
            ParticipantsArr = gamedata[x]
        
    DefeatChamps = []
    VictoryChamps = []
    #temp = []
    for x in ParticipantsArr:
        #print(x)        
        if ('participantId' in x):
            if (x['stats']['win'] == False):
                DefeatChamps.append(x['championId'])
            elif (x['stats']['win'] == True):
                VictoryChamps.append(x['championId'])
    
    print(DefeatChamps)
    print(VictoryChamps)
    DefeatChamps = np.array_split(DefeatChamps,5)
    new_row = {'C1': DefeatChamps[0], 'C2': DefeatChamps[1], 'C3': DefeatChamps[2], 'C4': DefeatChamps[3], 'C5': DefeatChamps[4], 'Result':0}
    DF = DF.append(new_row, ignore_index=True)   
    
    
    VictoryChamps = np.array_split(VictoryChamps,5)
    new_row = {'C1': VictoryChamps[0], 'C2': VictoryChamps[1], 'C3': VictoryChamps[2], 'C4': VictoryChamps[3], 'C5': VictoryChamps[4], 'Result':1}
    DF = DF.append(new_row, ignore_index=True)          

DF = pd.DataFrame(DF)
print(DF)

X = DF.iloc[:, :5]
Y = DF['Result']

import numpy as np
    from sklearn.model_selection import train_test_split
    
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
    print(np.shape(X_train))
    print(np.shape(X_test))
    print(np.shape(y_train))
    print(np.shape(y_test))

DF = pd.DataFrame(DF)
DF

# for i in range(1,6):
#   print("C" + str(i))
  

# import pandas as pd
# columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'Result']
# DF = pd.DataFrame(columns = columns)

# testarr = [1,2,3,4,5]
# print(testarr)

# DF

# new_row = {'C1': testarr[0], 'C2': testarr[1], 'C3': testarr[2], 'C4': testarr[3], 'C5': testarr[4]}
# #append row to the dataframe
# DF = DF.append(new_row, ignore_index=True)
# DF

temp = []
temp.append(1)

print(temp[0])

