# -*- coding: utf-8 -*-
"""PersonalizedTierListByPlayer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c8joDsO6B-DR-AfxbUpW_qMyC8WskgX2
"""

import numpy as np
import requests
import pandas as pd

#import 
columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'Result']
DF = pd.DataFrame(columns = columns)
print(DF)

print("hi")
key = "RGAPI-a8e3c5b5-d5f9-4f94-9f7a-7e5e3799879b"
summonerName = (str)(input('Summoner Name'))
url= "https://na1.api.riotgames.com/lol/summoner/v4/summoners/by-name/" + summonerName + "?api_key=" + key
params={'APPID': key}
response=requests.get(url,params=params)
values=response.json()
#print(values)

accountId = values['accountId']
#print(accountId)

matchlistsurl = "https://na1.api.riotgames.com/lol/match/v4/matchlists/by-account/" + accountId + "?api_key=" + key
matches = requests.get(matchlistsurl, params)
matchesdata = matches.json()
#print(matchesdata)

GamesArr = []
ChampionArr = []

matchlist = matchesdata['matches']
for match in matchlist:
    #print(match)
    for x in match:
        if (x == 'gameId'):
            GamesArr.append(match[x])
        elif (x == 'champion'):
            ChampionArr.append(match[x])

print(GamesArr)
print(ChampionArr)

import pandas as pd

#DF.append([1,1])

for games in GamesArr:
    gameurl = "https://na1.api.riotgames.com/lol/match/v4/matches/" + str(games) + "?api_key=" + key
    game = requests.get(gameurl, params)
    ParticipantsArr = []
    
    gamedata = game.json()
    for x in gamedata:
        #print(x)
        if (x == 'participants'):
            ParticipantsArr = gamedata[x]
        
    DefeatChamps = []
    VictoryChamps = []
    #temp = []
    for x in ParticipantsArr:
        #print(x)        
        if ('participantId' in x):
          if (x['championId'] > 0):
            if (x['stats']['win'] == False):
                DefeatChamps.append(x['championId'])
            elif (x['stats']['win'] == True):
                VictoryChamps.append(x['championId'])
    
    #print(DefeatChamps)
    #print(VictoryChamps)
    DefeatChamps = np.array_split(DefeatChamps,5)
    #if (len(str(int(DefeatChamps[0].astype(int)))) > 0):
    #  print(int(DefeatChamps[0].astype(int)))
    print('---DEFEAT---')
    #print(DefeatChamps)
    if (DefeatChamps[0] == []):
      print("nothing")
    else:
      print(DefeatChamps[0])
      #print("Y")
      if(DefeatChamps[0] != []):
        new_row = {'C1': int(DefeatChamps[0].astype(int)), 'C2': int(DefeatChamps[1].astype(int)), 'C3': int(DefeatChamps[2].astype(int)), 'C4': int(DefeatChamps[3].astype(int)), 'C5': int(DefeatChamps[4].astype(int)), 'Result':0}
        DF = DF.append(new_row, ignore_index=True)   
    
    
    VictoryChamps = np.array_split(VictoryChamps,5)
    print('--VICTORY--')
    #print(VictoryChamps)
    if (VictoryChamps[0] == []):
      print("something")
    else:
        if(VictoryChamps[0] != []):
          new_row = {'C1': int(VictoryChamps[0].astype(int)), 'C2': int(VictoryChamps[1].astype(int)), 'C3': int(VictoryChamps[2].astype(int)), 'C4': int(VictoryChamps[3].astype(int)), 'C5': int(VictoryChamps[4].astype(int)), 'Result':1}
          DF = DF.append(new_row, ignore_index=True)          

DF = pd.DataFrame(DF)
print(DF)

list1 = [[],[],[],[],[],[]]
if (list1[0] == []):
  print("s")
else:
  print("A")

X = DF.iloc[:, :5]
Y = DF['Result']

X

import numpy as np
    from sklearn.model_selection import train_test_split
    
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
    print(np.shape(X_train))
    print(np.shape(X_test))
    print(np.shape(y_train))
    print(np.shape(y_test))

from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Flatten, Conv2D, MaxPooling2D, Dropout

#y_train = to_categorical(y_train, 5)
#y_test = to_categorical(y_test, 5) 

print(y_train)

#MLP model


model = Sequential()

# Use your own hidden layer size
model.add(Dense(8, activation='relu', input_shape=(5,)))
model.add(Dense(1, activation = 'sigmoid'))


model.summary()

from tensorflow.keras.optimizers import Adam

opt = Adam(lr=0.001, decay=1e-7)

model.compile(loss='binary_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

import tensorflow as tf
X_train = np.asarray(X_train).astype('float32')
X_test = np.asarray(X_test).astype('float32')
y_train = np.asarray(y_train).astype('float32')
y_test = np.asarray(y_test).astype('float32')

Xtrain = tf.convert_to_tensor(X_train)
Xtest = tf.convert_to_tensor(X_test)
Ytrain = tf.convert_to_tensor(y_train)
Ytest = tf.convert_to_tensor(y_test)
print(np.shape(Xtrain))
print(np.shape(Xtest))


Monitor = model.fit(Xtrain, y_train,
              batch_size= 5 ,
              epochs= 500,
              validation_data=(Xtest, y_test),
              callbacks = [],
              shuffle = True)

#X= tf.convert_to_tensor(X)

arr = np.round((model.predict(Xtest)),0)
print(type(arr))
print(type(Ytest.numpy()))
yarr = Ytest.numpy()

print(arr - yarr)
#print(Predicted)
#print(Ytest)
#model.evaluate(Xtest,Ytest)